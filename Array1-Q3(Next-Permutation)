Next_Permutation[https://takeuforward.org/data-structure/next_permutation-find-next-lexicographically-greater-permutation/]
3 Approches
1. Store all the permutation in sorted array
   find the array from the set of sorted array
   return the just next permutated array.
2. STL - next_Permutation(arr.begin(),arr.end())
   Directly give the output 
3. Implementation of next_permutation STL

Code:
  #include <bits/stdc++.h> 
using namespace std;
vector<int> nextPermutation(vector<int> &A, int n)
{

//-------------STL----------------//
    // next_permutation(permutation.begin(),permutation.end());
    // return permutation;
//-----------STL Implementation-----------------//
    
    // int n = A.size(); // size of the array.

    // Step 1: Find the break point:
    
    int ind = -1; // break point
    for (int i = n - 2; i >= 0; i--) {
        if (A[i] < A[i + 1]) {
            // index i is the break point
            ind = i;
            break;
        }
    }

    // If break point does not exist:
    
    if (ind == -1) {
        // reverse the whole array:
        reverse(A.begin(), A.end());
        return A;
    }

    // Step 2: Find the next greater element
    //         and swap it with arr[ind]:

    for (int i = n - 1; i > ind; i--) {
        if (A[i] > A[ind]) {
            swap(A[i], A[ind]);
            break;
        }
    }

    // Step 3: reverse the right half:
    reverse(A.begin() + ind + 1, A.end());

    return A;

}   
